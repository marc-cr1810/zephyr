# Corrected Interleaving Test - Using all() for proper concurrent execution
print("=== Corrected Interleaving Test ===")

# Test 1: Proper concurrent execution using all()
async func worker(id) {
    print("Worker", id, "- Start")
    print("Worker", id, "- Step 1")
    print("Worker", id, "- Step 2")
    print("Worker", id, "- Step 3")
    print("Worker", id, "- End")
    return "Worker " + str(id) + " done"
}

print("Starting 3 workers with proper concurrency...")

# Spawn all workers and collect promises
promises = [
    spawn worker(1),
    spawn worker(2),
    spawn worker(3)
]

print("All workers spawned - now awaiting with all()")

# Use all() to wait for ALL tasks concurrently
results = await all(promises)

print("All workers completed!")
print("Results:", results)

print("")
print("=== Test 2: Sequential vs Concurrent Comparison ===")

# Sequential execution for comparison
print("\n--- Sequential Execution ---")
seq_result1 = await worker(10)
seq_result2 = await worker(11)
seq_result3 = await worker(12)
print("Sequential results:", [seq_result1, seq_result2, seq_result3])

# Concurrent execution
print("\n--- Concurrent Execution ---")
concurrent_promises = [
    spawn worker(20),
    spawn worker(21),
    spawn worker(22)
]
concurrent_results = await all(concurrent_promises)
print("Concurrent results:", concurrent_results)

print("")
print("=== Expected vs Actual Behavior ===")
print("")
print("Expected concurrent output:")
print("Worker 1 - Start")
print("Worker 2 - Start")
print("Worker 3 - Start")
print("Worker 1 - Step 1")
print("Worker 2 - Step 1")
print("Worker 3 - Step 1")
print("... (interleaved steps)")
print("")
print("If you see tasks completing one-by-one instead of interleaving,")
print("then the cooperative yielding mechanism needs more work.")
print("")
print("Key indicators of working concurrency:")
print("✓ All 'Start' messages appear before any 'Step 1' messages")
print("✓ Steps from different workers are interleaved")
print("✓ Tasks don't complete entirely before others begin")
