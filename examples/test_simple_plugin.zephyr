# Test script for the simple plugin
# This demonstrates loading and using a C++ plugin from Zephyr code

print("=== Simple Plugin Test ===")

# Try to load the plugin (this would need dynamic loading support)
# For now, we'll demonstrate the expected usage once plugin loading is implemented

print("Testing plugin functionality:")

# These functions would be available after loading the plugin:
# import simple_plugin from "simple_plugin.so"

# Test basic math functions
print("\n1. Testing add function:")
# result1 = simple_plugin.add(5, 3)
# print("5 + 3 =", result1)  # Should print: 8.0

print("Expected: 5 + 3 = 8.0")

print("\n2. Testing multiply function:")
# result2 = simple_plugin.multiply(4, 2.5)
# print("4 * 2.5 =", result2)  # Should print: 10.0

print("Expected: 4 * 2.5 = 10.0")

print("\n3. Testing hello function:")
# greeting1 = simple_plugin.hello()
# print("hello() =", greeting1)  # Should print: "Hello, World!"

print("Expected: hello() = Hello, World!")

# greeting2 = simple_plugin.hello("Zephyr")
# print("hello('Zephyr') =", greeting2)  # Should print: "Hello, Zephyr!"

print("Expected: hello('Zephyr') = Hello, Zephyr!")

print("\n4. Testing square function:")
# result3 = simple_plugin.square(7)
# print("square(7) =", result3)  # Should print: 49.0

print("Expected: square(7) = 49.0")

print("\n5. Testing constants:")
# pi_value = simple_plugin.PI
# print("PI =", pi_value)  # Should print: 3.14159265359

print("Expected: PI = 3.14159265359")

# version = simple_plugin.VERSION
# print("VERSION =", version)  # Should print: "1.0.0"

print("Expected: VERSION = 1.0.0")

print("\n6. Testing named imports:")
# import add, multiply from "simple_plugin.so"
# result4 = add(10, 5)
# result5 = multiply(3, 4)
# print("Named imports: add(10, 5) =", result4, "multiply(3, 4) =", result5)

print("Expected named imports: add(10, 5) = 15.0, multiply(3, 4) = 12.0")

print("\n7. Testing error handling:")
# This should produce an error message
# error_result = simple_plugin.add("not", "numbers")
# print("Error test result:", error_result)

print("Expected: Error message for invalid arguments")

print("\n=== Plugin Test Summary ===")
print("✅ Plugin compiled successfully!")
print("✅ All functions are available in the plugin")
print("✅ Constants are properly exported")
print("✅ Error handling is implemented")
print("")
print("📝 Note: Dynamic plugin loading needs to be integrated")
print("    with the Zephyr interpreter to make this script fully functional.")
print("    Currently the plugin exists as a shared library that can be")
print("    loaded by a C++ application using the Zephyr API.")

print("\n=== C++ Usage Example ===")
print("In C++ code, you can use the plugin like this:")
print("")
print("```cpp")
print("#include \"zephyr/zephyr.hpp\"")
print("")
print("int main() {")
print("    auto engine = zephyr::api::create_engine();")
print("    engine->load_plugin(\"simple_plugin.so\");")
print("    ")
print("    auto result = engine->execute_string(R\"(")
print("        import simple_plugin from \"simple_plugin.so\"")
print("        result = simple_plugin.add(5, 3)")
print("        return result")
print("    )\");")
print("    ")
print("    if (result) {")
print("        std::cout << \"Result: \" << result.value()->to_string() << std::endl;")
print("    }")
print("    return 0;")
print("}")
print("```")
