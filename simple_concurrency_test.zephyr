# Simple Concurrency Test - Check if async operations truly run concurrently
print("=== Simple Concurrency Test ===")

# Test 1: Check execution order in sequential vs parallel
print("\n1. Execution Order Test")
print("========================")

async func task_with_id(id) {
    print("Task", id, "starting")
    print("Task", id, "finished")
    return "Result " + str(id)
}

print("Sequential execution:")
result1 = await task_with_id(1)
result2 = await task_with_id(2)
result3 = await task_with_id(3)
print("Sequential results:", [result1, result2, result3])

print("\nParallel execution with spawn:")
promise1 = spawn task_with_id(4)
promise2 = spawn task_with_id(5)
promise3 = spawn task_with_id(6)
print("All tasks spawned")

par_result1 = await promise1
par_result2 = await promise2
par_result3 = await promise3
print("Parallel results:", [par_result1, par_result2, par_result3])

print("\nParallel execution with all():")
all_promises = [
    spawn task_with_id(7),
    spawn task_with_id(8),
    spawn task_with_id(9)
]
all_results = await all(all_promises)
print("All() results:", all_results)

# Test 2: Simple interleaving test
print("\n2. Interleaving Test")
print("====================")

async func work_with_steps(worker_id) {
    print("Worker", worker_id, "- Step 1")
    print("Worker", worker_id, "- Step 2")
    print("Worker", worker_id, "- Step 3")
    return "Worker " + str(worker_id) + " done"
}

print("If truly concurrent, we should see interleaved output:")
interleave_promises = [
    spawn work_with_steps("A"),
    spawn work_with_steps("B"),
    spawn work_with_steps("C")
]

interleave_results = await all(interleave_promises)
print("Interleaving test results:", interleave_results)

print("\n=== Test Complete ===")
