# Debug Segfault Test - Isolate the issue causing segfaults in async examples
print("=== Debug Segfault Test ===")

# Test 1: Basic async function (should work)
print("\n1. Testing basic async function...")
async func basic_test() {
    print("Basic async function running")
    return "basic_result"
}

basic_result = await basic_test()
print("Basic test result:", basic_result)

# Test 2: Simple spawn (should work)
print("\n2. Testing simple spawn...")
simple_promise = spawn basic_test()
simple_result = await simple_promise
print("Simple spawn result:", simple_result)

# Test 3: Multiple spawns with individual awaits (potential issue)
print("\n3. Testing multiple spawns with individual awaits...")
promise1 = spawn basic_test()
promise2 = spawn basic_test()
promise3 = spawn basic_test()

print("Spawns created, now awaiting individually...")
result1 = await promise1
print("Result 1:", result1)
result2 = await promise2
print("Result 2:", result2)
result3 = await promise3
print("Result 3:", result3)

# Test 4: Multiple spawns with all() (likely segfault source)
print("\n4. Testing multiple spawns with all()...")
try {
    all_promises = [
        spawn basic_test(),
        spawn basic_test(),
        spawn basic_test()
    ]
    print("All promises created, calling all()...")
    all_results = await all(all_promises)
    print("All results:", all_results)
} catch e {
    print("Error in all() test:", e)
}

# Test 5: More complex function to identify yield issues
print("\n5. Testing function with loops...")
async func loop_test(id) {
    print("Loop test", id, "starting")
    for i = 1; i <= 3; i++ {
        print("Loop test", id, "iteration", i)
    }
    print("Loop test", id, "finished")
    return "loop_" + str(id)
}

try {
    loop_result = await loop_test(1)
    print("Loop test result:", loop_result)
} catch e {
    print("Error in loop test:", e)
}

# Test 6: Class method async (another potential issue)
print("\n6. Testing async class methods...")
class TestClass {
    func init(name) {
        this.name = name
    }

    async func async_method() {
        print("Async method called on:", this.name)
        return "method_result_" + this.name
    }
}

try {
    test_obj = TestClass("test")
    method_result = await test_obj.async_method()
    print("Method result:", method_result)
} catch e {
    print("Error in method test:", e)
}

# Test 7: Spawned class methods (likely segfault)
print("\n7. Testing spawned class methods...")
try {
    method_promise = spawn test_obj.async_method()
    spawned_method_result = await method_promise
    print("Spawned method result:", spawned_method_result)
} catch e {
    print("Error in spawned method test:", e)
}

print("\n=== Debug Test Complete ===")
print("If segfault occurred, it should be after one of these tests.")
